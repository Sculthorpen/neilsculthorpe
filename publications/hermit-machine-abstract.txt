The importance of reasoning about and refactoring programs is a central tenet
of functional programming.  Yet our compilers and development toolchains only
provide rudimentary support for these tasks.  This paper introduces a
programmatic and compiler-centric interface that facilitates refactoring and
equational reasoning.  To develop our ideas, we have implemented HERMIT, a
toolkit enabling informal but systematic transformation of Haskell programs
from inside the Glasgow Haskell Compiler's optimization pipeline.  With
HERMIT, users can experiment with optimizations and equational reasoning,
while the tedious heavy lifting of performing the actual transformations is
done for them.

HERMIT provides a transformation API that can be used to build higher-level
rewrite tools.  One use-case is prototyping new optimizations as clients of
this API before being committed to the GHC toolchain.  We describe a HERMIT
application - a read-eval-print shell for performing transformations using
HERMIT.  We also demonstrate using this shell to prototype an optimization
on a specific example, and report our initial experiences and remaining
challenges.
